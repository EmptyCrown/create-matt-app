// Postgres models/index.js file
import * as R from 'ramda';
import { ENV, PROD } from '#/lib/env';
import Sequelize from 'sequelize';
import fs from 'fs';
import logger from '~/logger';
import path from 'path';

const basename = path.basename(__filename);

const { DB_URI } = process.env;
const sequelize = new Sequelize(DB_URI, {
  dialect: 'postgres',
  pool: {
    max: ENV === PROD ? 60 : 15,
    min: 0,
    acquire: 30000,
    idle: 10000,
  },
  logging: sql => {
    logger.debug(sql);
  },
  // Default options for model definitions
  define: {
    freezeTableName: true,
    charset: 'utf8mb4',
  },
});

const models = {
  sequelize,
  Sequelize,
};

fs.readdirSync(__dirname)
  .filter(
    filename =>
      filename.indexOf('.') !== 0 &&
      filename !== basename &&
      filename.slice(-3) === '.js'
  )
  .forEach(filename => {
    const model = require(path.join(__dirname, filename)).default;
    // Any models without explicitly-defined primary keys will have a primary
    // key autogenerated here -- a UUID col type with a default random gen'd
    // value.
    const hasPrimaryKey = R.any(
      R.prop('primaryKey'),
      Object.values(model.fields)
    );
    if (!hasPrimaryKey) {
      model.fields = {
        id: {
          type: Sequelize.UUID,
          defaultValue: Sequelize.fn('gen_random_uuid'),
          primaryKey: true,
        },
        ...model.fields,
      };
    }
    models[model.name] = model.init(model.fields, {
      sequelize,
      ...model.options,
    });
  });

Object.keys(models).forEach(name => {
  if (models[name].associate) {
    models[name].associate(models);
  }
});

Object.keys(models).forEach(modelName => {
  const { functions } = models[modelName];
  if (functions) {
    Object.entries(functions(models)).forEach(([fnName, fn]) => {
      models[modelName][fnName] = fn;
    });
  }
});

export default models;
export const Op = sequelize.Op;
